Javascript Functions

function f(a,b) {
	const sum = a + b;
	return sum;
}

console.log(f(3,4)); // 7

or 

[Anonymous Function]
var f = function(a,b) {
	const sum = a + b;
	return sum;
}

[Immediately Invoked Function Expression (IIFE)
const result = function(a,b) {
	const sum = a + b;
	return sum;
})(3,4);
- purpose is to encapsulate a variable within a new scope

[Functions w/in Functions]
function createFunction() {
	function f(a,b( {
		const sum = a + b;
		return sum;
	}
	return f;
}
const f = createFunction()

[Function Hoisting - using a function before it is initialized, reduces readability so bad practice]
function createFunction() {
    return f;
    function f(a, b) {
        const sum = a + b;
        return sum;
    }
}
const f = createFunction();

[Closures]
- Lexical environment: access to variables around it, allows function f to have access to a 
function createAdder(a) {
    function f(b) {
        const sum = a + b;
        return sum;
    }
    return f;
}
const f = createAdder(3);
console.log(f(4)); // 7

[Arrow Syntax]
const f = (a, b) => {
    const sum = a + b;
    return sum;
};
- if it returns nothing it implicitly returns undefined
- if code written on single line, can omit return
ex: const f = (a, b) => a + b;

[Rest Arguments]
- access all arguments as an array 
function f(...args) {
    const sum = args[0] + args[1];
    return sum;
}

function log(inputFunction) {
    return function(...args) {
        console.log("Input", args);
        const result = inputFunction(...args);
        console.log("Output", result);
        return result;
    }
}
const f = log((a, b) => a + b);
f(1, 2); // Logs: Input [1, 2] Output 3


